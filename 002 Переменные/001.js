/*
В простейшем случае мы можем использовать JS, как калькулятор
*/

console.log("Пример 1 ================================");
console.log(2*3+1); // 7
console.log(2*3+2); // 8

/*
Одно из базовых правил программирования
DONT REPEAT YOURSELF 
НЕ ПОВТОРЯЙСЯ

В данном случае мы повторяем получение 2*3.
Для хранения промежуточных результатов и нужны переменные.

===========> ПЕРЕМЕННЫЕ
"Промежуточным значениям в JavaScript можно давать имена, используя переменные.
Переменная похожа на ящичек, в который помещается лишь один предмет. 
Чтобы положить туда что-то еще, прежнее содержимое придется заменить.
Чтобы создать новую переменную, используйте ключевое слово var,
после которого укажите имя переменной." (c) JS для детей
*/

console.log("Пример 2 ================================")
var someNumber = 2*3
console.log(someNumber)  // 6
console.log(someNumber+1)  // 7
console.log(someNumber+2)  // 8

/*
    Для обмена значений переменных понадобится промежуточная переменная
*/

console.log("Пример 3 ================================")
var a = 5;
var b = 4;
var c = a;  // если не сохранить значение, которое было, оно потеряется
a = b;  // a - теряется
b = c; // но мы его уже сохраняли в переменной - c


/*
В JavaScript существует несколько основных типов данных:
number,string,boolean,null,undefined,object.
Переменная, при присвоении значения получает тип данных,
чтобы узнать его, существует оператор typeof.
*/
console.log("Пример 4 ================================")
console.log(typeof someNumber); // number
console.log(typeof "Hello World"); // string

/*
 typeof - зачем он нужен? Например:
 нужно написать функцию, которая будет вычислять возвраст
 по году рождения. Эту функцию будут использовать коллеги, и
 нужно учесть, что могут передать год рождения, как в виде числа,
 так и в виде строки. 
*/


/*
    важное замечание по названиям переменных (аннотация, naming)
    Названия должны быть осмысленны, и полностью передавать
    суть переменной. В JS принято называть переменные на англ языке.

    существуют несколько видов аннотаций
    CamelCase , camelCase (https://ru.wikipedia.org/wiki/CamelCase)
    snake_case (https://ru.wikipedia.org/wiki/Snake_case)
    
    в больших проектах есть соглашения об аннотации, вам придется
    адаптироваться к установленной системе

    !!!!!!!!!!!!!!
    PS Использование и придерживание одного стиля (аннотации)
    дает огромный плюс на собеседовании.
    Не пренебрегайте ею, даже в тестовых примерах и домашках.
*/
